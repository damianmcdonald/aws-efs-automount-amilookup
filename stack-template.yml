AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS EFS with EC2 Automount and AMI Lookup Lambda'

#########################################################
#                                                       # 
#        Start of Mappings section                      #
#                                                       #
#########################################################
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    c1.medium:
      Arch: PV64

#########################################################
#                                                       # 
#        Start of Parameters section                    #
#                                                       #
#########################################################
Parameters:
  VpcCidr:
    Type: 'String'
    Description: CIDR range of the Virtual Private Cloud (VPC) to be created
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.0.0/16
  PublicSubnet1Cidr:
    Type: 'String'
    Description: CIDR range of PublicSubnet1 to be created
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.1.0/24
  PublicSubnet2Cidr:
    Type: 'String'
    Description: CIDR range of PublicSubnet2 to be created
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.99.2.0/24
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: efs-automount-amilookup
  PrimaryTagName:
    Description: Name to be used as the primary name tag. For identification purposes.
    Type: 'String'
    Default: efs-automount-amilookup
  LambdaS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Type: String
  LambdaS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    Type: String
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - m1.small
      - m1.medium
      - c1.medium
    ConstraintDescription: Must be a valid EC2 instance type.

#########################################################
#                                                       # 
#        Start of Resources section                     #
#                                                       #
#########################################################
Resources:

  # Network configuration
  # VPC, IGW, 2 Public Subnets, Route Table  
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: !Join ['', ['VPC-', !Ref 'PrimaryTagName']]
        - Key: Stack
          Value: !Ref PrimaryTagName
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', ['IGW-', !Ref 'PrimaryTagName']]
        - Key: Stack
          Value: !Ref PrimaryTagName
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', ['PublicSubnet1-', !Ref 'PrimaryTagName']]
        - Key: Stack
          Value: !Ref PrimaryTagName
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', ['PublicSubnet2-', !Ref 'PrimaryTagName']]
        - Key: Stack
          Value: !Ref PrimaryTagName
  PublicRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['', ['PublicRT-', !Ref 'PrimaryTagName']]
        - Key: Stack
          Value: !Ref PrimaryTagName
  RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRT
  RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRT
  RouteToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  # Network configuration
  # Network Access Control List definitions
  # SSH(22), HTTP(80), HTTPS(443), Ephemeral(1024-65535)
  PublicSubnetNacl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['', ['PublicSubnetNacl-', !Ref 'PrimaryTagName']]
        - Key: Stack
          Value: !Ref PrimaryTagName
  PublicSubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicSubnetNacl
  PublicSubnetShhIngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicSubnetNacl
    Properties:
      NetworkAclId: !Ref PublicSubnetNacl
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  PublicSubnetHttpIngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicSubnetNacl
    Properties:
      NetworkAclId: !Ref PublicSubnetNacl
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  PublicSubnetHttpsIngress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicSubnetNacl
    Properties:
      NetworkAclId: !Ref PublicSubnetNacl
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  PublicSubnetEphemeralIngress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicSubnetNacl
    Properties:
      NetworkAclId: !Ref PublicSubnetNacl
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  PublicSubnetShhEngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicSubnetNacl
    Properties:
      NetworkAclId: !Ref PublicSubnetNacl
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  PublicSubnetHttpEngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicSubnetNacl
    Properties:
      NetworkAclId: !Ref PublicSubnetNacl
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  PublicSubnetHttpsEngress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicSubnetNacl
    Properties:
      NetworkAclId: !Ref PublicSubnetNacl
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  PublicSubnetEphemeralEngress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicSubnetNacl
    Properties:
      NetworkAclId: !Ref PublicSubnetNacl
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

  # Elastic File System configuration
  # EFS Mount Points in 2 Subnets 
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags: 
        - Key: Name
          Value: !Join ['', ['EFS-', !Ref 'PrimaryTagName']]
        - Key: Stack
          Value: !Ref PrimaryTagName
  EFSMountTarget1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt 
          - EFSSecurityGroup
          - GroupId
      SubnetId: !Ref PublicSubnet1 
  EFSMountTarget2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt 
          - EFSSecurityGroup
          - GroupId
      SubnetId: !Ref PublicSubnet2

  # Security Group configuration
  # SG to allow SSH(22), HTTP(80) and HTTPS(443)
  # SG to allow NFS(2049)
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable public service access; SSH(22), HTTP(80), HTTPS(443)
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: 0.0.0.0/0
          FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
      Tags:
        - Key: Name
          Value: !Join ['', ['sg-public-access-', !Ref 'PrimaryTagName']]
        - Key: Stack
          Value: !Ref PrimaryTagName
      VpcId: !Ref VPC
  EFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable NFS access from EC2
      SecurityGroupIngress:
        - FromPort: '2049'
          IpProtocol: tcp
          ToPort: '2049'
          SourceSecurityGroupId: !GetAtt 
            - InstanceSecurityGroup
            - GroupId
      Tags:
        - Key: Name
          Value: !Join ['', ['sg-nfs-access-', !Ref 'PrimaryTagName']]
        - Key: Stack
          Value: !Ref PrimaryTagName
      VpcId: !Ref VPC

  # Auto scaling configuration
  # CPU Alarm > 90% scale out, < 70% scale in
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
        - !Ref ScaleUpPolicy
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      EvaluationPeriods: '2'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '300'
      Statistic: Average
      Threshold: '90'
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
        - !Ref ScaleDownPolicy
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      EvaluationPeriods: '2'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '300'
      Statistic: Average
      Threshold: '70'
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: '3'
      MinSize: '2'
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet1
      Tags:
        - PropagateAtLaunch: 'true'
          Value: !Join ['', ['instance-efs-', !Ref 'PrimaryTagName']]
          Key: Name
        - PropagateAtLaunch: 'true'
          Value: !Ref PrimaryTagName
          Key: Stack
  ScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join 
        - '-'
        - - IAM
          - InstanceProfile
      Path: /
      Roles:
        - !Ref IAMAssumeInstanceRole
  IAMAssumeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'ec2:DescribeTags'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 's3:Get*'
                  - 's3:List*'
                Effect: Allow
                Resource: '*'
              - Action: 'logs:*'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: !Join 
            - '-'
            - - IAM
              - EC2
              - Policy
      RoleName: !Join 
        - '-'
        - - IAM
          - EC2
          - Role

  # ASG Launch configuration
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !GetAtt 
        - AMIInfo
        - Id
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !GetAtt 
          - InstanceSecurityGroup
          - GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          export LC_CTYPE=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          apt-get update
          apt-get install -y curl nfs-common
          EC2_REGION=${AWS::Region}
          DIR_TGT=/mnt/efs/
          EFS_FILE_SYSTEM_ID=${EFSFileSystem}
          mkdir -p $DIR_TGT
          DIR_SRC=$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $DIR_SRC:/ $DIR_TGT
          # persist the efs mount on reboot
          echo "$DIR_SRC:/ $DIR_TGT nfs nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" > /etc/fstab
          # touch file on EFS to verify functionality
          echo "Hello world from EFS: $HOSTNAME" >> $DIR_TGT/hello-world.txt

  # Lambda function to lookup AMI
  AMIInfo:
    Type: 'Custom::AMIInfo'
    Properties:
      ServiceToken: !GetAtt 
        - AMIInfoFunction
        - Arn
      Region: !Ref 'AWS::Region'
      Architecture: !FindInMap 
        - AWSInstanceType2Arch
        - !Ref InstanceType
        - Arch
  AMIInfoFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3BucketName
        S3Key: !Ref LambdaS3KeyPrefix
      Handler: 'amilookup.handler'
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs12.x
      Timeout: '15'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeImages'
                Resource: '*'